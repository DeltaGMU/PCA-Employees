{"remainingRequest":"C:\\Users\\dimit\\OneDrive\\IT 493\\PCAsrc\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\dimit\\OneDrive\\IT 493\\PCAsrc\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\dimit\\OneDrive\\IT 493\\PCAsrc\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\dimit\\OneDrive\\IT 493\\PCAsrc\\src\\views\\Timesheet.vue?vue&type=template&id=a4243e30&","dependencies":[{"path":"C:\\Users\\dimit\\OneDrive\\IT 493\\PCAsrc\\src\\views\\Timesheet.vue","mtime":1647239881785},{"path":"C:\\Users\\dimit\\OneDrive\\IT 493\\PCAsrc\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647226865847},{"path":"C:\\Users\\dimit\\OneDrive\\IT 493\\PCAsrc\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1647226934642},{"path":"C:\\Users\\dimit\\OneDrive\\IT 493\\PCAsrc\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647226865847},{"path":"C:\\Users\\dimit\\OneDrive\\IT 493\\PCAsrc\\node_modules\\vue-loader\\lib\\index.js","mtime":1647226919213}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}